import { Card, Modal } from 'react-bootstrap'
import jwtDecode from 'jwt-decode';
import React from 'react';
import { useEffect } from 'react';
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Navigate } from 'react-router-dom';
import Navbar from './Navbar';
import { Alert, Button, Grid } from '@mui/material';
import { addNewProjectService, fetchprojectServiceAll } from '../config/projectService';
import { IoCloseCircle } from "react-icons/io5";

// import { useSelector,useDispatch } from 'react-redux';
const regForName = RegExp(/^[a-zA-Z]/);
const regForURL = RegExp(/^(https?|ftp|torrent|image|irc):\/\/(-\.)?([^\s\/?\.#-]+\.?)+(\/[^\s]*)?$/);


const Dashboard = () => {
  const[showModel,setShowModel]=useState(false);
  const[state,setState]=useState({title:'',demo:'',github:'',index:'',alldata:[]})
  const[errors,setErrors] = useState({errtitle:'',errdemo:'',errgithub:'',allError:''})
  const [user,setUser] = useState({});
  const [project,setProject]=useState([])
  const [flag,setflag]=useState({flag1:true,flag2:true})
  
  const navigate = useNavigate();
  
  //closing the model
  const handlecolse=()=>{
    setflag({...flag,flag2:true})
    setErrors({...errors,allError:''})
    setState({...state,title:"",demo:"",github:""})
    setShowModel(false)
  }

  useEffect(()=>{
    if(localStorage.getItem('_token')!=undefined){
      const token = localStorage.getItem('_token');
      const decode = jwtDecode(token)
      setUser(decode)
      fetchProjectDetails();
    }
    else{
      navigate("/")
    }
  },[])

  //fetching all project which are not soft deleted
  const fetchProjectDetails=()=>{
    fetchprojectServiceAll().then(res => {
      setProject(res.data.data)
      console.log(res.data.data)//-->geting all data 
      setState({...state,alldata: res.data.data,title:"",demo:"",github:""})
    })
   setflag({...flag,flag:true}) 
  }

  //for validation
  const handler=(e)=>{
    const {name,value} = e.target;
    let error= ''
    switch (name){
      case "title":error = regForName.test(value) ? " ": "Invalid title";
        setErrors({...errors,errtitle:error});
        break;
      case "demo":error = regForURL.test(value) ? " ": "Invalid demo link";
        setErrors({...errors,errdemo:error});
        break;
      case "github":error = regForURL.test(value) ? " ": "Invalid github Link";
        setErrors({...errors,errgithub:error});
        break;
     
    }
    setState({...state,[name]:value})
 }
 //for adding in db
//  const addProject=async()=>{
//   const email = user.email;
//   if(state.title !== '' && state.demo !== '' && state.github !== '' && state.description !== '' && errors.errtitle == '' && errors.errdemo == '' && errors.errgithub == '' && errors.errdescription == '' ){
//     let formData = {
//       user_email:email,
//       title:state.title,
//       demo:state.demo,
//       github:state.github,
//       description:state.description
//     }
//     await addNewProjectService(formData).then(res =>{
//       if(res.data.err == 0)
//         alert(res.data.msg)
//       else
//         alert(res.data.msg)
//     })
//     fetchProjectDetails()
//     setShowModel(false)
//     setErrors({...errors,allError:''})
//   }
//   else{
//     setErrors({...errors,allError:"enter all details"})
//   }
// }


// adding new project in db
const addProject = async () => {
  console.log("click add")
  const email = user.email;
  if (state.title != '' && state.demo != '' && state.github != '' &&
    errors.errtitle == '' && errors.errdemo == '' && errors.errgithub == '') {
    let formData = {
      // user_email: email,
      title: state.title,
      demo: state.demo,
      github: state.github,
      
    }

    await addNewProjectService(formData).then(res => {
        if (res.data.err == 0)
          alert(res.data.msg)
        else
          alert(res.data.msg)
      })
    fetchProjectDetails()
    setShowModel(false)
    setErrors({ ...errors, allError: "" })
  }

  else {
    setErrors({ ...errors, allError: 'Enter All Details' })
  }

}



  //deleteProject
  const deleteProject=()=>{

  }
  //editproject
  const editProject = ()=>{

  }
  
  
  //updateproject
  const updateProject=()=>{

  }
  //filter for all self and other by comparing email
  const ApplyFilter = (value)=>{
    if(value === "Self"){
      const result = state.alldata.filter(ele => ele.user_email == user.email);
      setProject(result)
      console.log(result)//no data becuse not user creating data
      setflag({...flag,flag1:true})
    }
    else if(value === "Other"){
      const result = state.alldata.filter(ele => ele.user_email != user.email)
      setProject(result)
      console.log(result)
      setflag({...flag,flag1:false})
    }
    else{
      fetchProjectDetails();
      setflag({...flag,flag1:true})
    }
  }
  return (
    <>
    {localStorage.getItem('_token')!= undefined ?
    <>
      <Navbar/>
      <div className='container-fluid row mt-3'>
        {flag.flag1 ? //-->btn display in all and self tag because of flag is true
          <div className='col-6'>
            <button className='button btn-info' onClick={()=>setShowModel(true)}>Add new project</button>

          </div>
          :
          <div className='col-6'></div>
          }
          <div className='col-6 d-flex justify-content-end'>
            <p className='font-weight-bold mr-2'>Sort By:</p>
            <span><input type="radio" name="filter" onClick={()=>ApplyFilter("All")} />All</span>
            <span className='mx-1'><input type="radio" name='filter' onClick={()=>ApplyFilter("Self")}/>Self</span>
            <span><input type="radio" name='filter' onClick={()=>ApplyFilter("Other")}/>Other</span>
          </div>
      </div>

      <div className='mt-3'>
        <div>
          {project.length > 0 ?
            <>
            <Grid container spacing={2}>
              {
                project.map((ele,index)=>
                <Grid item xs={12} sm={6} md={4} key={ele._id}>
                  <Card className="prodContainer">
                    <Card.Body>
                      <Card.Title className='font-weight-bold'>Project Title : {ele.title}</Card.Title>
                      <Card.Text>
                        <div className='mt-3'>
                          <span className='font-weight-bold'>Github Link : </span><a href={ele.github} target="_blank">{ele.github}</a>
                          <span className='font-weight-bold'>Demo Link : </span><a href={ele.demo} target="_blank">{ele.demo}</a><br/>
                         
                        </div>
                        {/* //-->if previousle added project there then its showing only see details btn */}
                        <div className='mt-2 row d-flex justify-content-center'>
                          {ele.user_email == user.email && 
                            <Button varient="contained" color="success" onClick={()=>editProject(ele,index)}>Edit</Button>
                          }
                          <Button variant="contained" color="success" className="mx-2" onClick={() => navigate(`/projectDetails?_id=${ele._id}`)}>See Details</Button>
                          {ele.user_email == user.email &&
                          <Button varient="contained" color="success" onClick={()=>deleteProject(ele._id)}>Delete</Button>
                          }
                        </div>
                       
                      </Card.Text>
                    </Card.Body>
                  </Card>
                </Grid>
              )}
            </Grid>
            </>
            :
            <div>
              <img src='images/hello.jpg' width="100%" height="455px"/>
            </div>
          }
        </div>
      </div>
    </>:<Navigate to="/"></Navigate>//-->navigate to login 
    }


    <Modal show={showModel} onHide={handlecolse}>
      <Modal.Header>
        {flag.flag2 ?
        <Modal.Title>Add Project</Modal.Title>
         :
        <Modal.Title>Edit Project</Modal.Title>}
        <IoCloseCircle onClick={handlecolse} className="close" style={{width:"5rem",height:"4rem"}}></IoCloseCircle>
      </Modal.Header>
      {errors.allError.length != 0 &&
        <Alert severity='error'>{errors.allError}</Alert>
      }
      <Modal.Body>
        Title : <input type="text" className='form-control' name="title" value={state.title} onChange={handler}/>
        <span className='text-danger'>{errors.errtitle}</span>
        Demo Link : <input type="text" className='form-control' name="demo" value={state.demo} onChange={handler}/>
        <span className='text-danger'>{errors.errdemo}</span>
        Github Link : <input type="text" className='form-control' name="github" value={state.github} onChange={handler}/>
        <span className='text-danger'>{errors.errgithub}</span>
       
      </Modal.Body>
      <Modal.Footer>
        {
          flag.flag2 ?
          <Button variant="contained" color="success" onClick={() => addProject()}>Add</Button>
          :
          <Button variant="contained" color="success" onClick={() => updateProject()}>Update</Button>        }
      </Modal.Footer>
    </Modal>
    </>
  )
}

export default Dashboard


-->>>
import { Card, Modal } from "react-bootstrap";
import jwtDecode from "jwt-decode";
import React from "react";
import { useEffect } from "react";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Navigate } from "react-router-dom";
import Navbar from "./Navbar";
import { Alert, Button, Grid } from "@mui/material";
import {
  addNewProjectService,
  fetchprojectServiceAll,
} from "../config/projectService";
import { IoCloseCircle } from "react-icons/io5";

// import { useSelector,useDispatch } from 'react-redux';
const regForName = RegExp(/^[a-zA-Z]/);
const regForURL = RegExp(
  /^(https?|ftp|torrent|image|irc):\/\/(-\.)?([^\s\/?\.#-]+\.?)+(\/[^\s]*)?$/
);

const Dashboard = () => {
  const [showModel, setShowModel] = useState(false);
  const [state, setState] = useState({
    title: "",
    demo: "",
    github: "",
    index: "",
    alldata: [],
  });
  const [errors, setErrors] = useState({
    errtitle: "",
    errdemo: "",
    errgithub: "",
    allError: "",
  });
  const [user, setUser] = useState({});
  const [project, setProject] = useState([]);
  const [flag, setflag] = useState({ flag1: true, flag2: true });

  const navigate = useNavigate();

  //closing the model
  const handlecolse = () => {
    setflag({ ...flag, flag2: true });
    setErrors({ ...errors, allError: "" });
    setState({ ...state, title: "", demo: "", github: "" });
    setShowModel(false);
  };

  useEffect(() => {
    if (localStorage.getItem("_token") != undefined) {
      const token = localStorage.getItem("_token");
      const decode = jwtDecode(token);
      setUser(decode);
      fetchProjectDetails();
    } else {
      navigate("/");
    }
  }, []);

  //fetching all project which are not soft deleted
  const fetchProjectDetails = () => {
    fetchprojectServiceAll().then((res) => {
      setProject(res.data.data);
      console.log(res.data.data); //-->geting all data
      setState({
        ...state,
        alldata: res.data.data,
        title: "",
        demo: "",
        github: "",
      });
    });
    setflag({ ...flag, flag: true });
  };

  //for validation
  const handler = (e) => {
    const { name, value } = e.target;
    let error = "";
    switch (name) {
      case "title":
        error = regForName.test(value) ? " " : "Invalid title";
        setErrors({ ...errors, errtitle: error });
        break;
      case "demo":
        error = regForURL.test(value) ? " " : "Invalid demo link";
        setErrors({ ...errors, errdemo: error });
        break;
      case "github":
        error = regForURL.test(value) ? " " : "Invalid github Link";
        setErrors({ ...errors, errgithub: error });
        break;
    }
    setState({ ...state, [name]: value });
  };

  // adding new project in db
  const addProject = async () => {
    console.log("click");
    const email = user.email;
    console.log(email);
    if (
      state.title != "" &&
      state.demo != "" &&
      state.github != "" &&
      errors.errtitle == "" &&
      errors.errdemo == "" &&
      errors.errgithub == ""
    ) {
      let formData = {
        user_email: email,
        title: state.title,
        demo: state.demo,
        github: state.github,
      };
      await addNewProjectService(formData).then((res) => {
        console.log(res);
        if (res.data.err == 0) alert(res.data.msg);
        else alert(res.data.msg);
        console.log(res.data.msg);
      });
      fetchProjectDetails();
      setShowModel(false);
      setErrors({ ...errors, allError: "" });
    } else {
      setErrors({ ...errors, allError: "Enter All Details" });
    }
  };

  //deleteProject
  const deleteProject = () => {};
  //editproject
  const editProject = () => {};

  //updateproject
  const updateProject = () => {};
  //filter for all self and other by comparing email
  const ApplyFilter = (value) => {
    if (value === "Self") {
      const result = state.alldata.filter(
        (ele) => ele.user_email == user.email
      );
      setProject(result);
      console.log(result); //no data becuse not user creating data
      setflag({ ...flag, flag1: true });
    } else if (value === "Other") {
      const result = state.alldata.filter(
        (ele) => ele.user_email != user.email
      );
      setProject(result);
      console.log(result);
      setflag({ ...flag, flag1: false });
    } else {
      fetchProjectDetails();
      setflag({ ...flag, flag1: true });
    }
  };
  return (
    <>
      {
        localStorage.getItem("_token") != undefined ? (
          <>
            <Navbar />
            <div className="container-fluid row mt-3">
              {flag.flag1 ? ( //-->btn display in all and self tag because of flag is true
                <div className="col-6">
                  <button
                    className="button btn-info"
                    onClick={() => setShowModel(true)}
                  >
                    Add new project
                  </button>
                </div>
              ) : (
                <div className="col-6"></div>
              )}
              <div className="col-6 d-flex justify-content-end">
                <p className="font-weight-bold mr-2">Sort By:</p>
                <span>
                  <input
                    type="radio"
                    name="filter"
                    onClick={() => ApplyFilter("All")}
                  />
                  All
                </span>
                <span className="mx-1">
                  <input
                    type="radio"
                    name="filter"
                    onClick={() => ApplyFilter("Self")}
                  />
                  Self
                </span>
                <span>
                  <input
                    type="radio"
                    name="filter"
                    onClick={() => ApplyFilter("Other")}
                  />
                  Other
                </span>
              </div>
            </div>

            <div className="mt-3">
              <div>
                {project.length > 0 ? (
                  <>
                    <Grid container spacing={2}>
                      {project.map((ele, index) => (
                        <Grid item xs={12} sm={6} md={4} key={ele._id}>
                          <Card className="prodContainer">
                            <Card.Body>
                              <Card.Title className="font-weight-bold">
                                Project Title : {ele.title}
                              </Card.Title>
                              <Card.Text>
                                <div className="mt-3">
                                  <span className="font-weight-bold">
                                    Github Link :{" "}
                                  </span>
                                  <a href={ele.github} target="_blank">
                                    {ele.github}
                                  </a>
                                  <span className="font-weight-bold">
                                    Demo Link :{" "}
                                  </span>
                                  <a href={ele.demo} target="_blank">
                                    {ele.demo}
                                  </a>
                                  <br />
                                </div>
                                {/* //-->if previousle added project there then its showing only see details btn */}
                                <div className="mt-2 row d-flex justify-content-center">
                                  {ele.user_email == user.email && (
                                    <Button
                                      varient="contained"
                                      color="success"
                                      onClick={() => editProject(ele, index)}
                                    >
                                      Edit
                                    </Button>
                                  )}
                                  <Button
                                    variant="contained"
                                    color="success"
                                    className="mx-2"
                                    onClick={() =>
                                      navigate(`/projectDetails?_id=${ele._id}`)
                                    }
                                  >
                                    See Details
                                  </Button>
                                  {ele.user_email == user.email && (
                                    <Button
                                      varient="contained"
                                      color="success"
                                      onClick={() => deleteProject(ele._id)}
                                    >
                                      Delete
                                    </Button>
                                  )}
                                </div>
                              </Card.Text>
                            </Card.Body>
                          </Card>
                        </Grid>
                      ))}
                    </Grid>
                  </>
                ) : (
                  <div>
                    <img src="images/hello.jpg" width="100%" height="455px" />
                  </div>
                )}
              </div>
            </div>
          </>
        ) : (
          <Navigate to="/"></Navigate>
        ) //-->navigate to login
      }

      <Modal show={showModel} onHide={handlecolse}>
        <Modal.Header>
          {flag.flag2 ? (
            <Modal.Title>Add Project</Modal.Title>
          ) : (
            <Modal.Title>Edit Project</Modal.Title>
          )}
          <IoCloseCircle
            onClick={handlecolse}
            className="close"
            style={{ width: "5rem", height: "4rem" }}
          ></IoCloseCircle>
        </Modal.Header>
        {errors.allError.length != 0 && (
          <Alert severity="error">{errors.allError}</Alert>
        )}
        <Modal.Body>
          Title :{" "}
          <input
            type="text"
            className="form-control"
            name="title"
            value={state.title}
            onChange={handler}
          />
          <span className="text-danger">{errors.errtitle}</span>
          Demo Link :{" "}
          <input
            type="text"
            className="form-control"
            name="demo"
            value={state.demo}
            onChange={handler}
          />
          <span className="text-danger">{errors.errdemo}</span>
          Github Link :{" "}
          <input
            type="text"
            className="form-control"
            name="github"
            value={state.github}
            onChange={handler}
          />
          <span className="text-danger">{errors.errgithub}</span>
        </Modal.Body>
        <Modal.Footer>
          {flag.flag2 ? (
            <Button
              variant="contained"
              color="success"
              onClick={() => addProject()}
            >
              Add
            </Button>
          ) : (
            <Button
              variant="contained"
              color="success"
              onClick={() => updateProject()}
            >
              Update
            </Button>
          )}
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default Dashboard;
